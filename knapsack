DAA 
ASSIGNMENT NO. 1 
#include <iostream> 
using namespace std; 
int main(){  
 int i,j,k,n,weight,wt; 
 cout<<"\nEnter the number of elements : "; 
 cin>>n; 
 cout<<"\nEnter the maximum weight : "; 
 cin>>weight; 
 int p[n],w[n]; 
 float pw[n],x[n],v[n]; 
 cout<<"\n=================X Enter data X================\n"; 
 for(i=0;i<n;i++){ 
  cout<<"\nWeight : "; 
  cin>>w[i]; 
  cout<<"\nProfit : "; 
  cin>>p[i]; 
  pw[i]=(float)p[i]/w[i]; 
  x[i]=0; 
  v[i]=i+1; 
  cout<<"\n---------------------------------------------"; 
 } 
 cout<<"\n"; 
 int bag=0; 
 float tp=0,tw=0; 
 float mat[n+1][weight+1]; 
 int ch; 
 do{ 
               cout<<"\n\nEnter Your Choice :\n\n \t\t1.Greedy/Fractional\t\t2.Dynamic/0-1\n\n\t\t-->\t"; 
               cin>>ch; 
  switch(ch){ 
   case 1:{ 
    for(i=0;i<n;i++){ 
     for(j=i+1;j<n;j++){ 
      if(pw[i]<pw[j]){ 
       float temp; 
       int t; 
       temp=pw[i]; 
       pw[i]=pw[j]; 
       pw[j]=temp; 
       temp=v[i]; 
       v[i]=v[j]; 
       v[j]=temp; 
       t=p[i]; 
       p[i]=p[j]; 
       p[j]=t; 
       t=w[i]; 
       w[i]=w[j]; 
       w[j]=t; 
                                                                           } 
                                                                  } 
    }//sorting done 
    i=0; 
    while(bag<weight){ 
     if(bag+w[i]<weight){ 
      x[i]=1; 
      bag=bag+w[i]; 
     } 
     else{x[i]=(float)(weight-bag)/w[i]; 
      bag=weight; 
     } 
     i++;  
    } 
                                                                 for(i=0;i<n;i++){ 
     for(j=i+1;j<n;j++){ 
      if(v[i]>v[j]){ 
       float temp; 
       int t; 
       temp=pw[i]; 
       pw[i]=pw[j]; 
       pw[j]=temp; 
       temp=v[i]; 
       v[i]=v[j]; 
       v[j]=temp; 
       t=p[i]; 
       p[i]=p[j]; 
       p[j]=t; 
       t=w[i]; 
       w[i]=w[j]; 
       w[j]=t; 
       temp=x[i]; 
       x[i]=x[j]; 
       x[j]=temp;     
      } 
     } 
    }//resorting done 
    cout<<"\nElement : Fraction\n"; 
    for(i=0;i<n;i++){ 
     cout<<v[i]<<"  :  "<<x[i]<<"\n"; 
    } 
    for(i=0;i<n;i++){ 
     tp=tp+p[i]*x[i]; 
     tw=tw+w[i]*x[i]; 
    } 
    cout<<"\nTotal Profit : "<<tp; 
    cout<<"\nTotal Weight : "<<tw; 
    break; 
   } 
   case 2:{ 
    for(i=0;i<n;i++){ 
     x[i]=0; 
    } 
    for(i=0;i<n+1;i++){ 
     for(j=0;j<weight+1;j++){ 
      mat[i][0]=0; 
      mat[0][j]=0; 
     } 
    } 
    for(j=1;j<n+1;j++){ 
     for(k=1;k<weight+1;k++){ 
      if(k<w[j-1]){ 
       mat[j][k]=mat[j-1][k]; 
      } 
      else if(k>=w[j-1]){ 
      mat[j][k]=max(mat[j-1][k],p[j-1]+mat[j-1][k-w[j-1]]); 
      } 
     } 
    } 
    for(i=0;i<n+1;i++){ 
        cout<<"\n"; 
     for(j=0;j<weight+1;j++){ 
      cout<<mat[i][j]<<"\t"; 
     } 
     cout<<"\n"; 
    } 
     
    i=n; 
    wt=weight; 
    while(i>0 && wt>0){ 
     if(mat[i][wt]!=mat[i-1][wt]){ 
      i--; 
      x[i]=1; 
      wt=wt-w[i]; 
     } 
     else{ 
      i--; 
     } 
    } 
     
    cout<<"\n-------------------------------------------------------------------"; 
    cout<<"\nProfit : "; 
    for(i=0;i<n;i++){ 
     cout<<p[i]<<"\t"; 
    } 
    cout<<"\nWeight : "; 
    for(i=0;i<n;i++){ 
     cout<<w[i]<<"\t"; 
    } 
    cout<<"\nX[]    : "; 
    for(i=0;i<n;i++){ 
     cout<<x[i]<<"\t"; 
    } 
    cout<<"\nMaximum profit is : "<<mat[n][weight]; 
    break; 
   } 
   case 3:{ 
    cout<<"\n\t\tProgram exit!"; 
    exit(0); 
    break; 
   } 
   default:{ 
    cout<<"\n\t\tWrong option !"; 
    break; 
   } 
  }//end of switch 
  cout<<"\n-------------------------------------------------------------------"; 
 }while(ch!=3); 
 return 0; 
} 
 
//OUTPUT 
onkar@onkar-virtual-machine:~$ g++ Knapsack.cpp 
onkar@onkar-virtual-machine:~$ ./a.out 
 
Enter the number of elements : 7 
 
Enter the maximum weight : 15 
 
=================X Enter data X================ 
 
Weight : 2 
 
Profit : 10 
 --------------------------------------------- 
Weight : 3 
Profit : 5 --------------------------------------------- 
Weight : 5 
Profit : 15 --------------------------------------------- 
Weight : 7 
Profit : 7 --------------------------------------------- 
Weight : 1 
Profit : 6 --------------------------------------------- 
Weight : 4 
Profit : 18 --------------------------------------------- 
Weight : 1 
Profit : 3 --------------------------------------------- 
 
Enter Your Choice : 
 
   1.Greedy/Fractional  2.Dynamic/0-1 
 
  --> 1 
 
Element : Fraction 
1  :  1 
2  :  0.666667 
3  :  1 
4  :  0 
5  :  1 
6  :  1 
7  :  1 
 
Total Profit : 55.3333 
Total Weight : 15 ------------------------------------------------------------------- 
 
Enter Your Choice : 
 
   1.Greedy/Fractional  2.Dynamic/0-1 
 
  --> 2 
 
0 0 0 0 0 0 0 0 0 0 00 0 0
 0 0  
 
0 0 10 10 10 10 10 10 10 10 10 10 10
 10 10 10  
 
0 0 10 10 10 15 15 15 15 15 15 15 15
 15 15 15  
 
0 0 10 10 10 15 15 25 25 25 30 30 30
 30 30 30  
 
0 0 10 10 10 15 15 25 25 25 30 30 30
 30 32 32  
 
0 6 10 16 16 16 21 25 31 31 31 36 36
 36 36 38  
 
0 6 10 16 18 24 28 34 34 34 39 43 49
 49 49 54  
 
0 6 10 16 19 24 28 34 37 37 39 43 49
 52 52 54  
 ------------------------------------------------------------------- 
Profit : 10 5 15 7 6 18 3  
Weight : 2 3 5 7 1 4 1  
X[]    : 1 1 1 0 1 1 0  
Maximum profit is : 54 ------------------------------------------------------------------- 
 
Enter Your Choice : 
 
   1.Greedy/Fractional  2.Dynamic/0-1 
 
  -->    
