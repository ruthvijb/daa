/os


####################2.Address book###############################################################################################################################################
#!/bin/sh
#Addressbook

ch=1

while  [ $ch  -le 7 ]

do
echo -e "Enter choice"
echo -e "1) Create Address Book"
echo -e "2) Display Address Book"
echo -e "3) Insert record"
echo -e "4) Delete record"
echo -e "5) Modify record"
echo -e "6) Exit"
read ch

case $ch in

1)
echo -e "Enter Address Book name"
read fname
touch $fname
echo -e "Enter id\t"
read id
echo -e "Enter name\t"
read name
echo -e "Enter no\t"
read no
echo -e "Enter city\t"
read city
echo -e "$id\t$name\t$no\t$city">>$fname
;;

2)
echo -e "EMPID\tEMPNAME\tEMPNO\tEMPCITY"
cat $fname
;;

3)
echo -e "Enter the details of the record you want to enter\n"
echo -e "Enter id\t"
read id
echo -e "Enter name\t"
read name
echo -e "Enter no\t"
read no
echo -e "Enter city\t"
read city
echo -e "$id\t$name\t$no\t$city">>$fname
;;


4)
echo -e "Enter the EMPID of the record you want to delete"
read iddel
if  grep "$iddel" "$fname" 
then
sed -i "/$iddel/d" "$fname"
echo -e "Deleted Successfully!"
else
echo -e "Record with this id doesnt exist"
fi
cat $fname
;;


5)
echo -e "Enter old pattern you replace "
read unix
echo -e "Enter new pattern you want to place"
read linux
if grep "$unix" "$fname"
then
sed -i "s/$unix/$linux/2" $fname
echo -e "Successfully replaced!"
else
echo -e "Old pattern you entered doesnt exist"
fi
;;


6)
echo -e "Exiting"
break
;;



esac
done



#####################3.FORK (ORPHAN,ZOMBIE)#############################################################################################################################
CODE : 

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>

void arrayStore(char* c_arr[],int* i_arr, int n)
{
	for(int i=0;i<n;i++)
	{
		i_arr[i] = atoi(c_arr[i+1]);
	}
}

void arraySort(int* arr, int n, int order)
{
	for(int i=0;i<n-1;i++)
	{
		for(int j=0;j<n-i-1;j++)
		{
			if(order == -1)
			{
				if(arr[j]<arr[j+1])
				{
					int temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}
			else if(order == 1)
			{
				if(arr[j]>arr[j+1])
				{
					int temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}
		}
	}
}

void arrayDisplay(int* arr, int n)
{
	printf("\nDisplaying Array.... \n");
	for(int i=0;i<n;i++)
	{
		printf("%d\t",arr[i]);
	}
	printf("\n\n");
}

void main(int argc, char* argv[])
{
	int order;
	int arr[argc-1];
	int len = argc - 1;
	arrayStore(argv,arr,len);	
	
	pid_t pid, tpid, status;
	pid = fork();
	if(pid == 0)
	{
		//sleep(5); //Orphan State
		printf("\nChild Process with ID %d\n",getpid());
		printf("Child's Parent ID %d\n",getppid());
		order = -1;
		arraySort(arr,len,order);
		arrayDisplay(arr,len);
	}
	else
	{
		//sleep(5); //Zombie State
		system("ps");
		tpid = wait(&status);
		printf("\nParent Process with ID %d \n",getpid());
		order = 1;
		arraySort(arr,len,order);
		arrayDisplay(arr,len);
	}
}


#######################4.EXECV (MAIN,SOURCE)################################################################################################################################
CODE1:
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<stdio.h>


void main(int argc, char* argv[])
{

	//const char* arr[]={"./b.out", "1", "3", "5", "7", "8", "9", NULL};
	
	char* arr[argc];
	
	for(int i=1; i<argc; i++)
	{
		arr[i-1]=argv[i];
	}
	
	/*
	printf("\nPrinting string");
	for(int i=0; i<argc-1; i++)
	{
		printf("%s ", arr[i]);
	}
	*/
	
	//Sorting array
	char* temp[argc];
	for(int i=0; i<argc-2; i++)
	{
		for(int j=1; j<argc-2-i; j++)
		{
			if(atoi(arr[j])>atoi(arr[j+1]))
			{
				temp[j]=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp[j];
			}	
		}
	}
	
	arr[argc-1]=NULL;
	
	
	/*
	printf("\nPrinting sorted string");
	for(int j=0; j<argc-1; j++)
	{
		printf("%s ", arr[j]);
	}
	*/
	
	
	pid_t pid;
	
	pid=fork();
	
	if(pid == 0)
	{
		printf("\nProcess id is: %d", getpid());
		printf("\nParent Process id is: %d \n", getppid());
		
		for(int x=1; x<argc-1; x++)
		{
			printf("%s ",arr[x]);
		}
		
		printf("\n");
		
		execv(arr[0],arr);
	}
	else
	{
		pid = wait(NULL);
		
		printf("\nProcess id is: %d", getpid());
	}


}



CODE 2:
#include<stdio.h>
#include<stdlib.h>

int binary_Search(int low, int high, int key, int array[], int f ) 
{

	int mid = low + (high - low) / 2;

	if (key == array[mid])
	{
		f=1;
		return mid;
	}
	      	
	if (key<array[mid])
	{
		return binary_Search(low,mid-1,key, array,0);
	}
		
	if (key>array[mid])
	{	
		return binary_Search(mid+1,high,key,array,0);
	}

 
}
	
void BinarySearch_call(int count, int array[])
{
	int key,index;
	printf("Enter key : ");
	scanf("%d", &key);
	
	index = binary_Search(0,count-1,key,array,0);
	printf("\nPresent at index : %d",index);
}	
	
void main( int argc, char* argv[])
{
	int i,a[argc-1],sum=0;
	for(i=1;i<argc;i++)
	{
		a[i-1] =atoi(argv[i]);   //atoi==ascii to interger conversion.
	}
	//printf("Addition : %d ",sum);
	
	BinarySearch_call(argc, a);
	
}		





############################5.SJF,RR#######################################################################################################################################################################3
SJF:
#include<stdio.h>
#include<stdlib.h>

struct Process {
    int id;
    int arrival_time;
    int service_time;
    int waiting_time;
    int turnaround_time;
    int remaining_time;
};

void shortestJobFirst(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    int shortest;

    while (completed < n) {
        shortest = -1;
        int minServiceTime = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].remaining_time > 0 && processes[i].service_time < minServiceTime) {
                shortest = i;
                minServiceTime = processes[i].service_time;
            }
        }

        if (shortest == -1) {
            currentTime++;
        } else {	
            processes[shortest].remaining_time--;
            currentTime++;
            if (processes[shortest].remaining_time == 0) {
                completed++;
                processes[shortest].turnaround_time = currentTime - processes[shortest].arrival_time;
                processes[shortest].waiting_time = processes[shortest].turnaround_time - processes[shortest].service_time;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input arrival time and service time for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter service time for process %d: ", i + 1);
        scanf("%d", &processes[i].service_time);
        processes[i].remaining_time = processes[i].service_time;
    }

    shortestJobFirst(processes, n);

    printf("Process\tArrival Time\tService Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time, processes[i].service_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    // Calculate average waiting time and average turnaround time
    float total_waiting_time = 0, total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }
    float avg_waiting_time = total_waiting_time / n;
    float avg_turnaround_time = total_turnaround_time / n;

    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);

    return 0;
}




RR:
#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
};

void roundRobin(struct Process processes[], int n, int quantum) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].remaining_time > 0) {
                if (processes[i].remaining_time <= quantum) {
                    currentTime += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    completed++;
                } else {
                    currentTime += quantum;
                    processes[i].remaining_time -= quantum;
                }

                processes[i].turnaround_time = currentTime - processes[i].arrival_time;
                processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;

                if (processes[i].waiting_time < 0) {
                    processes[i].waiting_time = 0;
                }
            }
        }
    }
}

void calculateAvgTimes(struct Process processes[], int n) {
    float total_waiting_time = 0;
    float total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    float avg_waiting_time = total_waiting_time / n;
    float avg_turnaround_time = total_turnaround_time / n;

    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);

    struct Process processes[n];

    // Input arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    roundRobin(processes, n, quantum);

    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    calculateAvgTimes(processes, n);

    return 0;
}



#############################6.PRODUCER CONSUMER################################################################################################################################################333

#include <stdio.h>
#include <unistd.h>
#include <semaphore.h>
#include <pthread.h>

int buffer[5];
int in, out;
sem_t s, f, e;

void* producer(void* arg)
{
    sem_wait(&e);
    sem_wait(&s);
    int data;
    printf("\nEnter the Value ");
    scanf("%d", &data);
    buffer[in] = data;
    printf("Producer Thread id = %ld and Producer Item = %d", pthread_self(), data);sem_post(&s);     sem_post(&f);      sleep(2);
    in = (in + 1) % 5;
    sem_post(&s);
    sem_post(&f); 
    sleep(2);
}

void* consumer(void* arg)
{
    int conti = 0;
    do
    {
        sem_wait(&f);
        sem_wait(&s);
        int val = buffer[out];
        printf("\nConsumer Thread id = %ld and Consumer Item = %d", pthread_self(), val);
        out = (out + 1) % 5;
        sem_post(&s);
        sem_post(&e);
        sem_getvalue(&e, &conti);
    } while (conti != 5);
}

int main()
{
    pthread_t p_tid[5], c_tid;

    sem_init(&s, 0, 1);
    sem_init(&e, 0, 5);
    sem_init(&f, 0, 0);

    for (int i = 0; i < 5; i++)
    {
        pthread_create(&p_tid[i], NULL, producer, NULL);
    }
    pthread_create(&c_tid, NULL, consumer, NULL);

    for (int i = 0; i < 5; i++)
    {
        pthread_join(p_tid[i], NULL);
    }
    pthread_join(c_tid, NULL);

    return 0;
}






########################7.READER WRITER################################################################################################################################################################
#include<stdio.h>
#include<semaphore.h>
#include<pthread.h>
#include<unistd.h>

int books[5];

sem_t r,w;
int readCount=0;


void rread()
{
	FILE *fptr;
	fptr = fopen("/home/pranav/TIA28/file.txt", "r");
	char myString[100];
	//fgets(myString, 100, fptr);
	while (fgets(myString, sizeof(myString), fptr) != NULL) 
	{
        	printf("%s", myString);
    	}
	//printf("%s", myString);
	fclose(fptr);
}

void wwrite()
{
	FILE *fptr;
	fptr = fopen("/home/pranav/TIA28/file.txt", "a");
	printf("\nEnter Some text to write \n");
	char text[100];
	scanf("%s",text);
	fprintf(fptr,"%s\n",text);
	fclose(fptr);
}


void* reading(void* arg)
{
	sem_wait(&r);
	readCount++;
	if(readCount==1)
	{
		sem_wait(&w);
	}
	sem_post(&r);
	printf("\nThread ID for Reading is  %ld with count %d\n",pthread_self(),readCount);
	rread();
	sem_wait(&r);
	readCount--;
	if(readCount==0)
	{
		sem_post(&w);
	}
	sem_post(&r);
	sleep(3);
}

void* writing(void* arg)
{
	sem_wait(&w);
	printf("\nThread ID for Writing is  %ld\n",pthread_self());
	wwrite();
	sem_post(&w);
	sleep(3);
}

int main()
{
	pthread_t write[5],read[5];
	
	sem_init(&w, 0, 1);
	sem_init(&r, 0, 1);
	
	for(int i=0;i<5;i++)
	{
		pthread_create(&write[i], NULL, reading, NULL);
		pthread_create(&read[i], NULL, writing, NULL);
	}
	for (int i=0;i<5;i++)
    	{
    		pthread_join(write[i], NULL);
        	pthread_join(read[i], NULL);
    	}
	
	return 0;
}





##########################8.BANKERS###############################################################################################################################


#include<stdio.h>
#define NUM_PROC 10
#define NUM_RES 10

void input1D(int arr[], int n)
{
	for(int j=0;j<n;j++)
	{
		printf("\nEnter Total Resource %d >> ",j+1);
		scanf("%d",&arr[j]);
	}
}

void input2D(int arr[][NUM_RES], int n, int m)
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			printf("\nEnter resource %d for Process %d >> ",j+1,i+1);
			scanf("%d",&arr[i][j]);
		}
	}
}

void display1D(int arr[], int m)
{
	printf("\n");
	for(int j=0;j<m;j++)
	{
		printf("%d\t", arr[j]);
	}
	printf("\n");
}

void display2D(int arr[][NUM_RES], int m, int n)
{
	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			printf("%d\t", arr[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

void calculateCurrAvail(int alloct[][NUM_RES], int total[], int curAvail[], int m, int n)
{
	int temp[n];
	for(int i=0;i<n;i++)
	{
		temp[i]=0;
		for(int j=0;j<m;j++)
		{
			temp[i] += alloct[j][i];
		}
		curAvail[i] = total[i] - temp[i];
	}
}

void calculateNeed(int maxm[][NUM_RES], int alloct[][NUM_RES], int need[][NUM_RES], int m, int n)
{
	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			need[i][j] = maxm[i][j] - alloct[i][j];
		}
	}
}

void requestProcess(int request[], int curAvl[], int alloc[][NUM_RES], int need[][NUM_RES], int n)
{
    int ch,process,flag=0;
    printf("\nDo you want to add request to process >> ");
    scanf("%d",&ch);
    if(ch==1)
    {
        printf("\nFor which process you want to give request >> ");
        scanf("%d",&process);
        printf("\nEnter the request resources for process %d >> ",process);
        input1D(request,n);
        for(int i=0;i<n;i++)
        {
            if(request[i] <= need[process][i] && request[i] <= curAvl[i])
            {
                flag=0;
            }
            else
            {
                flag=1;
                break;
            }
        }
        if(flag!=1)
        {
            printf("\nThe request is accepted!! ");
            for(int i=0;i<n;i++)
            {
                curAvl[i] -= request[i];
                need[process][i] -= request[i];
                alloc[process][i] += request[i];
            }
        }
        else
        {
            printf("\nThe request cannot be accepted!!! ");
        }
    }
    else
    {
        return;
    }
}

void calculateFinalAvailable(int alloc[][NUM_RES], int need[][NUM_RES], int curAvl[], int finalAvl[][NUM_RES], int m, int n)
{
    int count = m;
    int arr[NUM_PROC];
    int done[NUM_PROC] = {0};
    int i = 0;
    
    while (count > 0)
    {
        int flag = 0;
        int currProc = -1; 

        for (int p = 0; p < m; p++)
        {
            if (done[p] == 0)
            {
                int canAllocate = 1;
                for (int j = 0; j < n; j++)
                {
                    if (need[p][j] > curAvl[j])
                    {
                        canAllocate = 0;
                        break;
                    }
                }
                if (canAllocate)
                {
                    currProc = p;
                    break;
                }
            }
        }        
        if (currProc == -1)
        {
            printf("No safe sequence found.\n");
            return;
        }        
        for (int j = 0; j < n; j++)
        {
            curAvl[j] += alloc[currProc][j];
            finalAvl[currProc][j] = curAvl[j];
        }        
        done[currProc] = 1;
        arr[i++] = currProc;
        count--;
    }
    printf("\n");
    printf("Safe sequence: P%d", arr[0]);
    for (int i = 1; i < m; i++)
    {
        printf(" -> P%d", arr[i]);
    }
    printf("\n");
    for(int i=0;i<m;i++)
    {
    	for(int j=0;j<n;j++)
	{
		printf("%d\t", finalAvl[arr[i]][j]);
	}
	printf("\n");
    }
    printf("\n");
}

int main()
{
	int numProc=5, numRes=4;
	
	printf("\nEnter the Number of Processes >> ");
	scanf("%d",&numProc);
	printf("\nEnter the Number of Resources >> ");
	scanf("%d",&numRes);
	
	int alloct[NUM_PROC][NUM_RES] = {{0, 0, 1, 2}, {2, 0, 0, 0}, {0, 0, 3, 4}, {2, 3, 5, 4}, {0, 3, 3, 2}};
    	int maxm[NUM_PROC][NUM_RES] = {{0, 0, 1, 2}, {2, 7, 5, 0}, {6, 6, 5, 6}, {4, 3, 5, 6}, {0, 6, 5, 2}};
    	int totalRes[NUM_RES] = {6, 7, 12, 12};
    	int avaInitial[NUM_RES], need[NUM_PROC][NUM_RES], avaFinal[NUM_PROC][NUM_RES];
    	int request[NUM_RES] = {1,0,2};
	
	printf("\nEnter values for Matrix Allocation >> ");
	input2D(alloct,numProc,numRes);
	printf("\nEnter values for Matrix Max-Claim >> ");
	input2D(maxm,numProc,numRes);
	printf("\nEnter values for Matrix Total Resource >> ");
	input1D(totalRes,numRes);
	
	printf("\nCalculating Currently Available Matrix");
	calculateCurrAvail(alloct,totalRes,avaInitial,numProc,numRes);
	printf("\nCalculating Need Matrix");
	calculateNeed(maxm,alloct,need,numProc,numRes);
	
	requestProcess(request,avaInitial,alloct,need,numRes);
	
	printf("\nDisplaying Max-Claim Matrix >> \n");
	display2D(maxm,numProc,numRes);
	printf("\nDisplaying Allocated Matrix >> \n");
	display2D(alloct,numProc,numRes);
        printf("\nDisplaying Need Matrix >> \n");
        display2D(need,numProc,numRes);
        printf("\nDisplaying Currently Avilable Matrix >> \n");
        display1D(avaInitial,numRes);
        printf("\nDisplaying Total Resource Matrix >> \n");
        display1D(totalRes,numRes);
        
        printf("\nCalculating Final Available Matrix");
	calculateFinalAvailable(alloct,need,avaInitial,avaFinal,numProc,numRes);
		
	return 0;
}


######################9.PAGE REPLACEMENT###############################################################################################################################################################

#include<stdio.h>
#include<stdlib.h>

void printFrames(int frames[], int frameSize) {
    for (int i = 0; i < frameSize; ++i) {
        if (frames[i] == -1) {
            printf("X ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

void FCFS(int pages[], int frameSize, int n) {
    int frames[frameSize];
    int counter = 0;
    int pageFaults = 0;

    for (int i = 0; i < frameSize; ++i) {
        frames[i] = -1;
    }

    for (int i = 0; i < n; ++i) {
        int pageExists = 0;
        for (int j = 0; j < frameSize; ++j) {
            if (frames[j] == pages[i]) {
                pageExists = 1;
                break;
            }
        }

        if (pageExists == 0) {
            frames[counter] = pages[i];
            ++counter;
            ++pageFaults;
            if (counter >= frameSize) {
                counter = 0;
            }
        }
        printf("Frames (FCFS): ");
        printFrames(frames, frameSize);
    }

    printf("Number of page faults using FCFS: %d\n\n", pageFaults);
}

void LRU(int pages[], int frameSize, int n) {
    int frames[frameSize];
    int counter = 0;
    int pageFaults = 0;
    int recent[frameSize] = {-1, -1, -1};

    for (int i = 0; i < frameSize; ++i) {
        frames[i] = -1;
    }

    for (int i = 0; i < n; ++i) {
        int pageExists = 0;
        for (int j = 0; j < frameSize; ++j) {
            if (frames[j] == pages[i]) {
                pageExists = 1;
                recent[j] = i;
                break;
            }
        }

        if (pageExists == 0) {
            int leastRecentIndex = 0;
            for (int j = 1; j < frameSize; ++j) {
                if (recent[j] < recent[leastRecentIndex]) {
                    leastRecentIndex = j;
                }
            }
            frames[leastRecentIndex] = pages[i];
            recent[leastRecentIndex] = i;
            ++pageFaults;
        }
        printf("Frames (LRU): ");
        printFrames(frames, frameSize);
    }

    printf("Number of page faults using LRU: %d\n\n", pageFaults);
}

void Optimal(int pages[], int frameSize,int n) {
    int frames[frameSize];
    int pageFaults = 0;

    for (int i = 0; i < frameSize; ++i) {
        frames[i] = -1;
    }

    for (int i = 0; i < n; ++i) {
        int pageExists = 0;
        for (int j = 0; j < frameSize; ++j) {
            if (frames[j] == pages[i]) {
                pageExists = 1;
                break;
            }
        }

        if (pageExists == 0) {
            int maxDistance = -1;
            int replaceIndex = -1;
            for (int j = 0; j < frameSize; ++j) {
                int futureIndex = 0;
                for (int k = i + 1; k < 20; ++k) {
                    if (frames[j] == pages[k]) {
                        futureIndex = k;
                        break;
                    }
                }
                if (futureIndex == 0) {
                    replaceIndex = j;
                    break;
                } else {
                    if (futureIndex > maxDistance) {
                        maxDistance = futureIndex;
                        replaceIndex = j;
                    }
                }
            }
            frames[replaceIndex] = pages[i];
            ++pageFaults;
        }
        printf("Frames (Optimal): ");
        printFrames(frames, frameSize);
    }

    printf("Number of page faults using Optimal: %d\n\n", pageFaults);
}

int main() {
    int pages[20];
    int n;
    printf("Enter the size of string \n");
    scanf("%d",&n);
    printf("Enter the reference string:\n");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &pages[i]);
    }

    int frameSize = 3;

    FCFS(pages, frameSize,n);
    LRU(pages, frameSize,n);
    Optimal(pages, frameSize,n);

    return 0;
}



#######################10.FIFO###########################################################################################################################################################

Writer  : -
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
    int fd;
    char *myfifo = "/tmp/myfifo";

    // Create the named pipe (FIFO)
    mkfifo(myfifo, 0666);

    char sentence[80];

    while (1)
    {
        // Open FIFO for writing
        fd = open(myfifo, O_WRONLY);

        // Take input sentence from the user
        printf("Enter a sentence: ");
        fgets(sentence, 80, stdin);

        // Write the sentence to the FIFO
        write(fd, sentence, strlen(sentence) + 1);
        close(fd);

        // Open FIFO for reading
        fd = open(myfifo, O_RDONLY);

        // Read and print the processed data
        char processed_data[256];
        read(fd, processed_data, sizeof(processed_data));
        printf("Processed data: %s\n", processed_data);
        close(fd);
    }

    return 0;
}

Reader :- 
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
    int fd;
    char *myfifo = "/tmp/myfifo";

    // Create the named pipe (FIFO)
    mkfifo(myfifo, 0666);

    while (1)
    {
        // Open FIFO for reading
        fd = open(myfifo, O_RDONLY);

        // Read the sentence from the FIFO
        char sentence[80];
        read(fd, sentence, sizeof(sentence));
        
        read(fd, sentence, 80);
        // Print the read string and close
        printf("User1: %s\n", sentence);
        close(fd);

        // Process the data (count characters, words, and lines)
        int char_count = 0, word_count = 0, line_count = 0;
        for (int i = 0; sentence[i] != '\0'; i++)
        {
            if(sentence[i] == '\n')
            {
                line_count++;
            }
            else if(sentence[i] == ' ')
            {
                word_count++;
            }
            else
            {
            	char_count++;
            }
            	
        }
        word_count++; // Count the last word

        // Create a string with the counting results
        char counting_result[256];
        snprintf(counting_result, sizeof(counting_result), "Characters: %d, Words: %d, Lines: %d", char_count, word_count, line_count);

        // Write the counting results to a file
        FILE *output_file = fopen("output.txt", "w");
        if (output_file)
        {
            fprintf(output_file, "%s\n", counting_result);
            fclose(output_file);
        }

        // Open FIFO for writing
        fd = open(myfifo, O_WRONLY);

        // Send the counting results back to Process 1
        write(fd, counting_result, strlen(counting_result) + 1);
        close(fd);
    }

    return 0;
}


######################11.SHARED MEMORY######################################################################################################################################################33
1:-
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

int main() {
    // ftok to generate unique key
    key_t key = ftok("shmfile", 65);

    // shmget returns an identifier in shmid
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);

    // shmat to attach to shared memory
    char *str = (char *)shmat(shmid, (void *)0, 0);

    printf("Write Data : ");
    fgets(str, 1024, stdin);

    printf("Data written in memory: %s\n", str);

    // detach from shared memory
    shmdt(str);

    return 0;
}

2:-
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

int main() {
    // ftok to generate unique key
    key_t key = ftok("shmfile", 65);

    // shmget returns an identifier in shmid
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);

    // shmat to attach to shared memory
    char *str = (char *)shmat(shmid, (void *)0, 0);

    printf("Data read from memory: %s\n", str);

    // detach from shared memory
    shmdt(str);

    // destroy the shared memory
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}





#####################12.DISK SCHEDULING##################################################################################################################################################################

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

void shortestSeekTimeFirst(int request[], int head, int n) 
{
    int seek_sequence[n];
    int seek_count = 0;
    bool visited[n];

    for (int i = 0; i < n; i++) 
    {
        visited[i] = false;
    }

    for (int i = 0; i < n; i++) 
    {
        int min_distance = INT_MAX;
        int index = -1;
        for (int j = 0; j < n; j++) 
        {
            if (!visited[j] && abs(head - request[j]) < min_distance) 
            {
                index = j;
                min_distance = abs(head - request[j]);
            }
        }
        visited[index] = true;
        seek_sequence[i] = request[index];
        seek_count += min_distance;
        head = request[index];
    }

    printf("SSTF Disk Scheduling Algorithm:\n");
    printf("Total seek time: %d\n", seek_count);
    printf("Seek sequence: ");
    for (int i = 0; i < n; i++) 
    {
        printf("%d ", seek_sequence[i]);
    }
    printf("\n\n");
}

void scan(int request[], int head, int n, int direction, int disk_size) 
{
    int seek_sequence[n + 1];
    int seek_count = 0;
    int distance;
    int cur_track;

    for (int i = 0; i < n; i++) 
    {
        for (int j = i + 1; j < n; j++) 
        {
            if (request[i] > request[j]) 
            {
                int temp = request[i];
                request[i] = request[j];
                request[j] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) 
    {
        if (head < request[index]) 
        {
            break;
        }
    }

    int left = index - 1;
    int right = index;

    int seek_sequence_index = 0;

    // Handle right direction
    if(direction==1)
    {
        while (right < n) 
        {
            cur_track = request[right];
            distance = abs(cur_track - head);
            seek_count += distance;
            seek_sequence[seek_sequence_index++] = cur_track;
            head = cur_track;
            right++;
        }

        cur_track = disk_size-1;
        distance = abs(cur_track - head);
        seek_count += distance;
        seek_sequence[seek_sequence_index++] = cur_track;
        head = cur_track;

        while (left >= 0) 
        {
            cur_track = request[left];
            distance = abs(cur_track - head);
            seek_count += distance;
            seek_sequence[seek_sequence_index++] = cur_track;
            head = cur_track;
            left--;
        }
    }
    else if(direction==0)
    {
        while (left >= 0) 
        {
            cur_track = request[left];
            distance = abs(cur_track - head);
            seek_count += distance;
            seek_sequence[seek_sequence_index++] = cur_track;
            head = cur_track;
            left--;
        }

        cur_track = 0;
        distance = abs(cur_track - head);
        seek_count += distance;
        seek_sequence[seek_sequence_index++] = cur_track;
        head = cur_track;

        while (right < n) 
        {
            cur_track = request[right];
            distance = abs(cur_track - head);
            seek_count += distance;
            seek_sequence[seek_sequence_index++] = cur_track;
            head = cur_track;
            right++;
        }
    }

    printf("SCAN Disk Scheduling Algorithm:\n");
    printf("Total seek time: %d\n", seek_count);
    printf("Seek sequence: ");
    for (int i = 0; i <= n; i++) 
    {
        printf("%d ", seek_sequence[i]);
    }
    printf("\n\n");
}

void cLook(int request[], int head, int n, int direction, int disk_size) 
{
    int seek_sequence[n];
    int seek_count = 0;
    int distance;
    int cur_track;

    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = i + 1; j < n; j++) 
        {
            if (request[i] > request[j]) 
            {
                int temp = request[i];
                request[i] = request[j];
                request[j] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) 
    {
        if (head < request[index]) 
        {
            break;
        }
    }

    int left = index-1;
    int right = index;

    for (int i = 0; i < n; i++) 
    {
        if (direction == 0) 
        {
            if (left <= 0) 
            {
                cur_track = request[0];
                left = n-1;
            }
            else
            {
                cur_track = request[left];
                left--;
            }
        } 
        else if(direction == 1)
        {
            cur_track = request[right];
            right = (right + 1) % n;
        }
        distance = abs(cur_track - head);
        seek_sequence[i] = cur_track;
        head = cur_track;
        seek_count += distance;
    }

    printf("C-LOOK Disk Scheduling Algorithm:\n");
    printf("Total seek time: %d\n", seek_count);
    printf("Seek sequence: ");
    for (int i = 0; i < n; i++) 
    {
        printf("%d ", seek_sequence[i]);
    }
    printf("\n\n");
}

int main() 
{
    int n, head, direction;
    int disk_size = 200;
    printf("Enter the number of requests: ");
    scanf("%d", &n);
    printf("Enter the Disk Size : ");
    scanf("%d",&disk_size);
    int proc[n];
    printf("Enter the requests: ");
    for(int i = 0; i < n; i++) 
    {
        scanf("%d", &proc[i]);
    }
    printf("Enter the initial head position: ");
    scanf("%d", &head);
    printf("Enter the direction (0 for left, 1 for right): ");
    scanf("%d", &direction);

    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = i + 1; j < n; j++) 
        {
            if (proc[i] > proc[j]) 
            {
                int temp = proc[i];
                proc[i] = proc[j];
                proc[j] = temp;
            }
        }
    }

    shortestSeekTimeFirst(proc, head, n);
    scan(proc, head, n, direction, disk_size);
    cLook(proc, head, n, direction, disk_size);

    return 0;
}

